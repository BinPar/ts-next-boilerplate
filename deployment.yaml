# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ${ENVIRONMENT}
  labels:
    app.kubernetes.io/name: ${ENVIRONMENT}
    app.kubernetes.io/instance: ${ENVIRONMENT}
---
# Service - next-service
apiVersion: v1
kind: Service
metadata:
  labels:
    run: next-${ENVIRONMENT}
  name: next-service-${ENVIRONMENT}
  namespace: ${ENVIRONMENT}
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: next-${ENVIRONMENT}
  sessionAffinity: None
  type: ClusterIP
---
# Issuer - letsencrypt
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: letsencrypt-${ENVIRONMENT}
  namespace: ${ENVIRONMENT}
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: soporte@binpar.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-${ENVIRONMENT}
    # Enable the HTTP-01 challenge provider
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Ingress - ingress-${ENVIRONMENT}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    cert-manager.io/issuer: "letsencrypt-${ENVIRONMENT}"
  generation: 2
  name: ingress-${ENVIRONMENT}
  namespace: ${ENVIRONMENT}
spec:
  rules:
  - host: ${CICD_GIT_REPO_NAME}-${ENVIRONMENT}.binpar.cloud
    http:
      paths:
      - backend:
          serviceName: next-service-${ENVIRONMENT}
          servicePort: 80
        path: /
  tls:
  - hosts:
    - ${CICD_GIT_REPO_NAME}-${ENVIRONMENT}.binpar.cloud
    secretName: ${CICD_GIT_REPO_NAME}-cert-${ENVIRONMENT}
---
# Deploy - next-deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: next-${ENVIRONMENT}
  name: next-deploy-${ENVIRONMENT}
  namespace: ${ENVIRONMENT}
spec:
  replicas: 2
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      run: next-${ENVIRONMENT}
  template:
    metadata:
      labels:
        run: next-${ENVIRONMENT}
    spec:
      containers:
      - image: ${CICD_IMAGE}:${CICD_EXECUTION_SEQUENCE}
        name: next-${ENVIRONMENT}
        envFrom:
        - configMapRef:
            name: next-config-${ENVIRONMENT}
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 80
            scheme: HTTP
          initialDelaySeconds: 120
          failureThreshold: 2
          timeoutSeconds: 5
          periodSeconds: 60
        resources:
          requests:
            memory: "256Mi"
            cpu: "50m"
          limits:
            memory: "1024Mi"
            cpu: "950m"
---
# HPA - api-hpa-${ENVIRONMENT}
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: next-hpa-${ENVIRONMENT}
  namespace: ${ENVIRONMENT}
spec:
  maxReplicas: 4
  minReplicas: 2
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: next-deploy-${ENVIRONMENT}
  targetCPUUtilizationPercentage: 80
